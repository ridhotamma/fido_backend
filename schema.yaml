openapi: 3.0.3
info:
  title: Fido Web API
  version: 1.0.0
  description: API documentation for Fido Web
paths:
  /api/messages/:
    get:
      operationId: messages_list
      tags:
      - messages
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
          description: ''
  /api/messages/send/{user_id}/:
    post:
      operationId: messages_send_create
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - messages
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Message'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Message'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /api/messages/with/{user_id}/:
    get:
      operationId: messages_with_list
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - messages
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
          description: ''
  /api/notifications/:
    get:
      operationId: notifications_list
      tags:
      - notifications
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
          description: ''
  /api/notifications/{id}/read/:
    put:
      operationId: notifications_read_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Notification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Notification'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
    patch:
      operationId: notifications_read_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNotification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNotification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNotification'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
  /api/posts/{id}/archive/:
    post:
      operationId: posts_archive_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/posts/{id}/delete/:
    delete:
      operationId: posts_delete_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/posts/{id}/edit/:
    put:
      operationId: posts_edit_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    patch:
      operationId: posts_edit_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPost'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
  /api/posts/{post_id}/comments/:
    get:
      operationId: posts_comments_list
      parameters:
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
          description: ''
  /api/posts/{post_id}/comments/{parent_id}/reply/:
    post:
      operationId: posts_comments_reply_create
      parameters:
      - in: path
        name: parent_id
        schema:
          type: integer
        required: true
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
  /api/posts/{post_id}/comments/create/:
    post:
      operationId: posts_comments_create_create
      parameters:
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
  /api/posts/{post_id}/like/:
    post:
      operationId: posts_like_create
      parameters:
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/posts/{post_id}/media/upload/:
    post:
      operationId: posts_media_upload_create
      parameters:
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/posts/{post_id}/unlike/:
    post:
      operationId: posts_unlike_create
      parameters:
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/posts/comments/{comment_id}/like/:
    post:
      operationId: posts_comments_like_create
      parameters:
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/posts/comments/{comment_id}/unlike/:
    post:
      operationId: posts_comments_unlike_create
      parameters:
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/posts/comments/{parent_id}/replies/:
    get:
      operationId: posts_comments_replies_list
      parameters:
      - in: path
        name: parent_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
          description: ''
  /api/posts/create/:
    post:
      operationId: posts_create_create
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
  /api/users/{user_id}/follow/:
    post:
      operationId: users_follow_create
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/users/{user_id}/followers/:
    get:
      operationId: users_followers_retrieve
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/users/{user_id}/following/:
    get:
      operationId: users_following_retrieve
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/users/{user_id}/unfollow/:
    post:
      operationId: users_unfollow_create
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/users/login/:
    post:
      operationId: users_login_create
      tags:
      - users
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/users/profile/me/:
    get:
      operationId: users_profile_me_retrieve
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/users/profile/update/:
    put:
      operationId: users_profile_update_update
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/users/profile/upload-avatar/:
    post:
      operationId: users_profile_upload_avatar_create
      tags:
      - users
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProfilePicture'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProfilePicture'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfilePicture'
          description: ''
  /api/users/refresh/:
    post:
      operationId: users_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/users/register/:
    post:
      operationId: users_register_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
components:
  schemas:
    Comment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: string
          readOnly: true
        post:
          type: integer
          readOnly: true
        content:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        parent:
          type: integer
          nullable: true
        mentions:
          type: string
          readOnly: true
      required:
      - content
      - created_at
      - id
      - mentions
      - post
      - user
    Message:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        sender:
          type: integer
          readOnly: true
        sender_username:
          type: string
          readOnly: true
        recipient:
          type: integer
        recipient_username:
          type: string
          readOnly: true
        content:
          type: string
        image:
          type: string
          format: uri
          nullable: true
        video:
          type: string
          format: uri
          nullable: true
        is_read:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - recipient_username
      - sender
      - sender_username
    Notification:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        recipient:
          type: integer
          readOnly: true
        recipient_username:
          type: string
          readOnly: true
        sender:
          type: integer
          readOnly: true
        sender_username:
          type: string
          readOnly: true
        notification_type:
          allOf:
          - $ref: '#/components/schemas/NotificationTypeEnum'
          readOnly: true
        post:
          type: integer
          readOnly: true
          nullable: true
        comment:
          type: integer
          readOnly: true
          nullable: true
        message:
          type: string
          readOnly: true
        is_read:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - comment
      - created_at
      - id
      - message
      - notification_type
      - post
      - recipient
      - recipient_username
      - sender
      - sender_username
    NotificationTypeEnum:
      enum:
      - like
      - reply
      type: string
      description: |-
        * `like` - Like
        * `reply` - Reply
    PatchedNotification:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        recipient:
          type: integer
          readOnly: true
        recipient_username:
          type: string
          readOnly: true
        sender:
          type: integer
          readOnly: true
        sender_username:
          type: string
          readOnly: true
        notification_type:
          allOf:
          - $ref: '#/components/schemas/NotificationTypeEnum'
          readOnly: true
        post:
          type: integer
          readOnly: true
          nullable: true
        comment:
          type: integer
          readOnly: true
          nullable: true
        message:
          type: string
          readOnly: true
        is_read:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
    PatchedPost:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        content:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        archived:
          type: boolean
          readOnly: true
        likes_count:
          type: string
          readOnly: true
        likes:
          type: string
          readOnly: true
        media:
          type: array
          items:
            $ref: '#/components/schemas/PostMedia'
          readOnly: true
    Post:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        content:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        archived:
          type: boolean
          readOnly: true
        likes_count:
          type: string
          readOnly: true
        likes:
          type: string
          readOnly: true
        media:
          type: array
          items:
            $ref: '#/components/schemas/PostMedia'
          readOnly: true
      required:
      - archived
      - content
      - created_at
      - id
      - likes
      - likes_count
      - media
      - user
    PostMedia:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        file:
          type: string
          format: uri
          nullable: true
        file_sm:
          type: string
          format: uri
          readOnly: true
          nullable: true
        file_md:
          type: string
          format: uri
          readOnly: true
          nullable: true
        file_lg:
          type: string
          format: uri
          readOnly: true
          nullable: true
        uploaded_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - file_lg
      - file_md
      - file_sm
      - id
      - uploaded_at
    ProfilePicture:
      type: object
      properties:
        avatar:
          type: string
          format: uri
          nullable: true
        avatar_sm:
          type: string
          format: uri
          readOnly: true
        avatar_md:
          type: string
          format: uri
          readOnly: true
        avatar_lg:
          type: string
          format: uri
          readOnly: true
      required:
      - avatar_lg
      - avatar_md
      - avatar_sm
    Register:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
        full_name:
          type: string
          writeOnly: true
        email:
          type: string
          format: email
        phone_number:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - email
      - full_name
      - id
      - password
      - phone_number
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
